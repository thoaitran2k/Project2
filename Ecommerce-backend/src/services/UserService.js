const User = require("../models/UserModel");
const bcrypt = require("bcrypt");
const { generateAccessToken, generateRefreshToken } = require("./jwtService");
const moment = require("moment");

const createUser = async ({
  username,
  email,
  password,
  phone,
  dob,
  gender,
}) => {
  const hashedPassword = await bcrypt.hash(password, 10); // M√£ h√≥a m·∫≠t kh·∫©u

  const newUser = new User({
    username,
    email,
    password: hashedPassword,
    phone,
    dob,
    gender,
  });

  await newUser.save();
  return newUser;
};

const checkUserExistsByEmail = async (email) => {
  return await User.exists({ email });
};

const forgotPassword = async (email, newPassword, confirmPassword) => {
  try {
    // Ki·ªÉm tra xem email c√≥ trong h·ªá th·ªëng kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return {
        status: "ERROR",
        message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!",
      };
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u nh·∫≠p v√†o c√≥ tr√πng kh·ªõp kh√¥ng
    if (newPassword !== confirmPassword) {
      return {
        status: "ERROR",
        message: "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!",
      };
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o database
    user.password = hashedPassword;
    await user.save();

    return {
      status: "OK",
      message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!",
    };
  } catch (e) {
    throw new Error("C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: " + e.message);
  }
};

const loginUser = async ({ email, password }) => {
  try {
    const checkUser = await User.findOne({ email });
    if (!checkUser) {
      return { status: "ERROR", message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" };
    }

    const isMatch = bcrypt.compareSync(password, checkUser.password);
    if (!isMatch) {
      return { status: "ERROR", message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" };
    }

    const accessToken = generateAccessToken({
      id: checkUser.id,
      isAdmin: checkUser.isAdmin,
    });
    const refreshToken = generateRefreshToken({
      id: checkUser.id,
      isAdmin: checkUser.isAdmin,
    });

    return {
      status: "OK",
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      accessToken,
      refreshToken,
    };
  } catch (e) {
    throw e;
  }
};

const updateUser = async (id, data) => {
  try {
    if (data.password) {
      data.password = await bcrypt.hash(data.password, 10);
    } else {
      delete data.password; // Kh√¥ng c·∫≠p nh·∫≠t n·∫øu kh√¥ng c√≥ m·∫≠t kh·∫©u m·ªõi
    }

    const updatedUser = await User.findByIdAndUpdate(id, data, { new: true });
    return {
      status: "OK",
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
      data: updatedUser,
    };
  } catch (e) {
    throw e;
  }
};

const deleteUser = async (id) => {
  try {
    await User.findByIdAndDelete(id);
    return { status: "OK", message: "User deleted successfully" };
  } catch (e) {
    throw e;
  }
};

const getAllUser = async () => {
  try {
    const users = await User.find().select("-password");
    //const allUsers = await User.find(); // L·∫•y danh s√°ch user t·ª´ DB
    console.log(allUsers);
    return {
      status: "OK",
      message: "L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      data: allUsers,
    };
  } catch (e) {
    throw new Error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: " + e.message);
  }
};

const changePasswordUser = async (userId, oldPassword, newPassword) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      console.log("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
      return { success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    }

    console.log("üîç M·∫≠t kh·∫©u c≈© t·ª´ client:", oldPassword);
    console.log("üîç M·∫≠t kh·∫©u hash trong database:", user.password);

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      //console.log("‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng kh·ªõp!");
      return { success: false, message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!" };
    }

    if (newPassword.length < 3) {
      //console.log("‚ùå M·∫≠t kh·∫©u m·ªõi qu√° ng·∫Øn!");
      return {
        success: false,
        message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!",
      };
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    user.password = hashedPassword;
    await user.save();

    //console.log("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
    return { success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" };
  } catch (error) {
    console.error("üî• L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:", error.message);
    return {
      success: false,
      message: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u!",
      error: error.message,
    };
  }
};

const getDetailsUser = async (id) => {
  try {
    const user = await User.findOne({
      _id: id,
    }).select("-password");

    if (user === null) {
      return {
        status: "OK",
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      };
    }

    return {
      status: "OK",
      message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: user,
    };
  } catch (e) {
    throw e;
  }
};

module.exports = {
  createUser,
  loginUser,
  updateUser,
  deleteUser,
  getAllUser,
  getDetailsUser,
  checkUserExistsByEmail,
  forgotPassword,
  changePasswordUser,
};
