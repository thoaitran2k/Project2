const User = require("../models/UserModel");
const bcrypt = require("bcrypt");
const { generateAccessToken, generateRefreshToken } = require("./jwtService");
const moment = require("moment");

const createUser = async ({
  username,
  email,
  password,
  phone,
  dob,
  gender,
  address = [],
  avatar = "",
}) => {
  const hashedPassword = await bcrypt.hash(password, 10); // M√£ h√≥a m·∫≠t kh·∫©u

  const newUser = new User({
    username,
    email,
    password: hashedPassword,
    phone,
    dob,
    gender,
    address,
    avatar,
  });

  await newUser.save();
  return newUser;
};

const checkUserExistsByEmail = async (email) => {
  return await User.exists({ email });
};

const forgotPassword = async (email, newPassword, confirmPassword) => {
  try {
    // Ki·ªÉm tra xem email c√≥ trong h·ªá th·ªëng kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return {
        status: "ERROR",
        message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!",
      };
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u nh·∫≠p v√†o c√≥ tr√πng kh·ªõp kh√¥ng
    if (newPassword !== confirmPassword) {
      return {
        status: "ERROR",
        message: "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!",
      };
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o database
    user.password = hashedPassword;
    await user.save();

    return {
      status: "OK",
      message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!",
    };
  } catch (e) {
    throw new Error("C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: " + e.message);
  }
};

const loginUser = async ({ email, password }) => {
  try {
    const checkUser = await User.findOne({ email });
    if (!checkUser) {
      return { status: "ERROR", message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" };
    }

    const isMatch = bcrypt.compareSync(password, checkUser.password);
    if (!isMatch) {
      return { status: "ERROR", message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" };
    }

    const accessToken = generateAccessToken({
      id: checkUser.id,
      isAdmin: checkUser.isAdmin,
    });
    const refreshToken = generateRefreshToken({
      id: checkUser.id,
      isAdmin: checkUser.isAdmin,
    });

    return {
      status: "OK",
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      accessToken,
      refreshToken,
    };
  } catch (e) {
    throw e;
  }
};

const updateUser = async (id, data) => {
  try {
    if (data.password) {
      data.password = await bcrypt.hash(data.password, 10);
    } else {
      delete data.password;
    }

    const updatedUser = await User.findByIdAndUpdate(id, data, { new: true });
    return {
      status: "OK",
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
      data: updatedUser,
    };
  } catch (e) {
    throw e;
  }
};

const deleteUser = async (id) => {
  try {
    await User.findByIdAndDelete(id);
    return { status: "OK", message: "User deleted successfully" };
  } catch (e) {
    throw e;
  }
};

const getAllUser = async () => {
  try {
    const users = await User.find().select("-password");
    //const allUsers = await User.find(); // L·∫•y danh s√°ch user t·ª´ DB
    console.log(allUsers);
    return {
      status: "OK",
      message: "L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      data: allUsers,
    };
  } catch (e) {
    throw new Error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: " + e.message);
  }
};

const changePasswordUser = async (userId, oldPassword, newPassword) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      console.log("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
      return { success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    }

    console.log("üîç M·∫≠t kh·∫©u c≈© t·ª´ client:", oldPassword);
    console.log("üîç M·∫≠t kh·∫©u hash trong database:", user.password);

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      //console.log("‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng kh·ªõp!");
      return { success: false, message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!" };
    }

    if (newPassword.length < 3) {
      //console.log("‚ùå M·∫≠t kh·∫©u m·ªõi qu√° ng·∫Øn!");
      return {
        success: false,
        message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!",
      };
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    user.password = hashedPassword;
    await user.save();

    //console.log("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
    return { success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" };
  } catch (error) {
    console.error("üî• L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:", error.message);
    return {
      success: false,
      message: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u!",
      error: error.message,
    };
  }
};

const getDetailsUser = async (id) => {
  try {
    const user = await User.findOne({
      _id: id,
    }).select("-password");

    if (user === null) {
      return {
        status: "OK",
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      };
    }

    return {
      status: "OK",
      message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: user,
    };
  } catch (e) {
    throw e;
  }
};

const addAddress = async (userId, newAddress) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return { status: "ERROR", message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    }

    // Ki·ªÉm tra n·∫øu `user.address` c√≥ t·ªìn t·∫°i hay ch∆∞a
    if (!user.address) {
      user.address = []; // G√°n m·∫£ng tr·ªëng n·∫øu ch∆∞a c√≥
    }

    // Gi·ªõi h·∫°n t·ªëi ƒëa 3 ƒë·ªãa ch·ªâ
    if (user.address.length >= 3) {
      return {
        status: "WARNING",
        message: "B·∫°n ch·ªâ c√≥ th·ªÉ l∆∞u t·ªëi ƒëa 3 ƒë·ªãa ch·ªâ!",
      };
    }

    // N·∫øu ƒë·ªãa ch·ªâ m·ªõi l√† m·∫∑c ƒë·ªãnh, reset c√°c ƒë·ªãa ch·ªâ c≈©
    if (newAddress.isDefault) {
      user.address.forEach((addr) => (addr.isDefault = false));
    }

    // Th√™m ƒë·ªãa ch·ªâ m·ªõi v√†o danh s√°ch
    user.address.push(newAddress);
    await user.save();

    return { status: "OK", message: "Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!", data: user };
  } catch (error) {
    console.error("‚ùå L·ªói trong UserService.addAddress:", error);
    throw new Error("L·ªói khi th√™m ƒë·ªãa ch·ªâ: " + error.message);
  }
};

const setDefaultAddress = async (userId, addressId) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return { status: "ERROR", message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    }

    // C·∫≠p nh·∫≠t l·∫°i c√°c ƒë·ªãa ch·ªâ kh√°c kh√¥ng ph·∫£i l√† m·∫∑c ƒë·ªãnh
    user.address.forEach((addr) => {
      addr.isDefault = addr._id.equals(addressId);
    });

    await user.save();

    return {
      status: "OK",
      message: "C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh th√†nh c√¥ng!",
      data: user,
    };
  } catch (error) {
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh: " + error.message);
  }
};

const getAddresses = async (userId) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return { status: "ERROR", message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    }

    return {
      status: "OK",
      message: "L·∫•y danh s√°ch ƒë·ªãa ch·ªâ th√†nh c√¥ng!",
      data: user.address,
    };
  } catch (error) {
    throw new Error("L·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ: " + error.message);
  }
};

const deleteAddress = async (userId, addressId) => {
  try {
    if (!userId || !addressId) {
      return {
        status: "FAIL",
        message: "Thi·∫øu th√¥ng tin userId ho·∫∑c addressId!",
      };
    }

    const user = await User.findById(userId);
    if (!user) {
      return { status: "FAIL", message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    }

    console.log("Danh s√°ch ƒë·ªãa ch·ªâ tr∆∞·ªõc khi x√≥a:", user.address);
    console.log("ID c·∫ßn x√≥a:", addressId);

    // Ki·ªÉm tra n·∫øu `address` ch∆∞a t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i m·∫£ng
    if (!Array.isArray(user.address)) {
      user.address = []; // G√°n th√†nh m·∫£ng r·ªóng n·∫øu ch∆∞a c√≥
      await user.save();
      return { status: "FAIL", message: "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ n√†o ƒë·ªÉ x√≥a!" };
    }

    // Ki·ªÉm tra xem `addressId` c√≥ t·ªìn t·∫°i kh√¥ng
    const addressExists = user.address.some(
      (addr) => addr._id.toString() === addressId
    );
    if (!addressExists) {
      return { status: "FAIL", message: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ c·∫ßn x√≥a!" };
    }

    // X√≥a ƒë·ªãa ch·ªâ
    user.address = user.address.filter(
      (addr) => addr._id.toString() !== addressId
    );
    await user.save();

    return {
      status: "OK",
      message: "X√≥a ƒë·ªãa ch·ªâ th√†nh c√¥ng!",
      data: user.address,
    };
  } catch (error) {
    return {
      status: "ERROR",
      message: "L·ªói khi x√≥a ƒë·ªãa ch·ªâ!",
      error: error.message,
    };
  }
};

// H√†m c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
const updateAddress = async (userId, addressId, newAddress) => {
  try {
    let updateFields = {};

    // L·∫∑p qua t·∫•t c·∫£ c√°c tr∆∞·ªùng trong newAddress v√† ch·ªâ th√™m nh·ªØng gi√° tr·ªã h·ª£p l·ªá v√†o updateFields
    Object.keys(newAddress).forEach((key) => {
      if (
        newAddress[key] !== undefined &&
        newAddress[key] !== null &&
        newAddress[key] !== ""
      ) {
        updateFields[`address.$.${key}`] = newAddress[key];
      }
    });

    // Ki·ªÉm tra xem c√≥ tr∆∞·ªùng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t kh√¥ng
    if (Object.keys(updateFields).length === 0) {
      throw new Error("Kh√¥ng c√≥ tr∆∞·ªùng h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t");
    }

    console.log("Updating fields:", updateFields);

    // C·∫≠p nh·∫≠t v√†o database
    const updatedUser = await User.findOneAndUpdate(
      { _id: userId, "address._id": addressId },
      { $set: updateFields },
      { new: true, runValidators: true }
    );

    if (!updatedUser) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c ƒë·ªãa ch·ªâ");
    }

    return updatedUser;
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ:", error.message);
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ: " + error.message);
  }
};

const getInfoAddress = async (userId, addressId) => {
  try {
    // T√¨m ki·∫øm ng∆∞·ªùi d√πng theo userId v√† t√¨m ƒë·ªãa ch·ªâ v·ªõi addressId trong m·∫£ng addresses
    const user = await User.findById(userId); // T√¨m ng∆∞·ªùi d√πng theo userId

    if (!user) {
      return { status: "FAIL", message: "User not found" };
    }

    // T√¨m ƒë·ªãa ch·ªâ trong m·∫£ng addresses c·ªßa ng∆∞·ªùi d√πng
    const address = user.addresses.find((addr) => addr.addressId === addressId);

    if (!address) {
      return { status: "FAIL", message: "Address not found" };
    }

    // Tr·∫£ v·ªÅ th√¥ng tin ƒë·ªãa ch·ªâ
    return { status: "SUCCESS", data: address };
  } catch (error) {
    // X·ª≠ l√Ω l·ªói
    console.error("Error getting address:", error);
    return { status: "ERROR", message: "L·ªói m√°y ch·ªß!", error: error.message };
  }
};

module.exports = {
  createUser,
  loginUser,
  updateUser,
  deleteUser,
  getAllUser,
  getDetailsUser,
  checkUserExistsByEmail,
  forgotPassword,
  changePasswordUser,
  addAddress,
  setDefaultAddress,
  getAddresses,
  deleteAddress,
  updateAddress,
  getInfoAddress,
};
