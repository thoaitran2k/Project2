const cloudinary = require("./cloudinary");
const streamifier = require("streamifier");
const crypto = require("crypto");

const uploadImageToCloudinary = async (files, folder = "products") => {
  try {
    if (!files) {
      throw new Error("Kh√¥ng c√≥ file n√†o h·ª£p l·ªá ƒë·ªÉ upload");
    }

    // N·∫øu ch·ªâ c√≥ 1 file, chuy·ªÉn n√≥ th√†nh m·∫£ng ƒë·ªÉ x·ª≠ l√Ω ƒë·ªìng nh·∫•t
    if (!Array.isArray(files)) {
      files = [files];
    }

    const hashes = await Promise.all(
      files.map(async (file) => {
        if (!file || !file.buffer) {
          throw new Error("File kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i");
        }
        return {
          file,
          hash: crypto.createHash("sha256").update(file.buffer).digest("hex"),
        };
      })
    );

    const uniqueUploads = [];
    const uploadedImages = {};

    for (const { file, hash } of hashes) {
      //console.log(`üîç Ki·ªÉm tra ·∫£nh tr√πng v·ªõi hash: ${hash}`);

      if (uploadedImages[hash]) {
        //console.log("‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥:", uploadedImages[hash]);
        continue;
      }

      // üîπ T√¨m ·∫£nh theo hash trong Cloudinary
      const existingImages = await cloudinary.search
        .expression(`folder=${folder} AND tags=${hash}`)
        .execute();

      if (existingImages.resources.length > 0) {
        // //console.log(
        //   "‚úÖ ·∫¢nh ƒë√£ t·ªìn t·∫°i:",
        //   existingImages.resources[0].secure_url
        // );
        uploadedImages[hash] = existingImages.resources[0].secure_url;
        continue;
      }

      console.log("üÜï ·∫¢nh ch∆∞a c√≥, ti·∫øn h√†nh upload...");

      // üîπ Upload ·∫£nh m·ªõi
      const uploadedImage = await new Promise((resolve, reject) => {
        const stream = cloudinary.uploader.upload_stream(
          { folder, tags: [hash] },
          (error, result) => {
            if (error) {
              console.error("L·ªói Cloudinary:", error);
              return reject(new Error(`L·ªói Cloudinary: ${error.message}`));
            }
            //console.log("‚úÖ Upload th√†nh c√¥ng:", result.secure_url);
            resolve(result.secure_url);
          }
        );
        streamifier.createReadStream(file.buffer).pipe(stream);
      });

      uploadedImages[hash] = uploadedImage;
      uniqueUploads.push(uploadedImage);
    }

    return Object.values(uploadedImages);
  } catch (error) {
    console.error("L·ªói ki·ªÉm tra ·∫£nh:", error);
    throw new Error(`L·ªói ki·ªÉm tra ·∫£nh: ${error.message}`);
  }
};

module.exports = { uploadImageToCloudinary };
