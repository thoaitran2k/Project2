const PromotionCode = require("../models/PromotionCode");
const { sendPromotionCode } = require("../services/MailService"); // Đường dẫn theo dự án của bạn

const sendPromoCodeToUser = async (req, res) => {
  try {
    const { email, userName, userId, type = "welcome" } = req.body;

    // Tạo mã khuyến mãi mới
    const code = await PromotionCode.generateCode({
      prefix: type.toUpperCase(),
      length: 6,
    });

    const newPromo = new PromotionCode({
      code,
      discountType: "percent",
      discountValue: 5, // 10% hoặc số tiền cố định
      minOrderValue: 0,
      maxDiscount: 50000,
      maxUsage: 1,
      usedCount: 0,
      appliesTo: "user",
      targetIds: [userId], // Áp dụng riêng cho user
      startAt: new Date(),
      expiredAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Hết hạn sau 30 ngày
      isActive: true,
      issuedFor: type,
      issuedTo: userId,
      isAutoGenerated: true,
      description: `Mã giảm giá dành riêng cho ${userName}`,
    });

    await newPromo.save();

    // Gửi email chứa mã
    const result = await sendPromotionCode(email, newPromo, userName);

    if (result.status === "SUCCESS") {
      return res.status(200).json({
        message: "Mã khuyến mãi đã được tạo và gửi thành công",
        code: newPromo.code,
      });
    } else {
      return res.status(500).json({
        message: "Gửi email thất bại",
        error: result.error,
      });
    }
  } catch (err) {
    console.error("Lỗi tạo mã và gửi mail:", err);
    return res.status(500).json({ message: "Lỗi server", error: err.message });
  }
};

const deletePromotionCode = async (req, res) => {
  try {
    const { id } = req.params;

    const deleted = await PromotionCode.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ message: "Không tìm thấy mã giảm giá" });
    }

    res.status(200).json({ message: "Xóa mã giảm giá thành công" });
  } catch (error) {
    console.error("Lỗi xóa mã:", error);
    res.status(500).json({ message: "Lỗi server khi xóa mã giảm giá" });
  }
};

const updatePromotion = async (req, res) => {
  try {
    const { id } = req.params;
    const updatedData = req.body;

    const promo = await PromotionCode.findById(id);
    if (!promo) {
      return res.status(404).json({ message: "Mã giảm giá không tồn tại" });
    }

    Object.assign(promo, updatedData);
    await promo.save();

    res
      .status(200)
      .json({ success: true, message: "Cập nhật thành công", promo });
  } catch (error) {
    console.error("Lỗi cập nhật mã giảm giá:", error);
    res.status(500).json({ message: "Lỗi máy chủ" });
  }
};

module.exports = {
  sendPromoCodeToUser,
  deletePromotionCode,
  updatePromotion,
};
