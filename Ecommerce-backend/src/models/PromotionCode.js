const mongoose = require("mongoose");

const promotionCodeSchema = new mongoose.Schema(
  {
    code: {
      type: String,
      required: true,
      unique: true,
      uppercase: true,
      trim: true,
      validate: {
        validator: (v) => /^[A-Z0-9]+$/.test(v),
        message: "Mã chỉ được chứa chữ hoa và số",
      },
    },
    discountType: {
      type: String,
      enum: ["percent", "fixed"],
      required: true,
    },
    discountValue: {
      type: Number,
      required: true,
      min: 1,
      validate: {
        validator: function (v) {
          if (this.discountType === "percent") return v <= 100;
          return true;
        },
        message: "Giảm giá % không vượt quá 100",
      },
    },
    minOrderValue: {
      type: Number,
      default: 0,
      min: 0,
    },
    maxDiscount: {
      type: Number,
      min: 0,
      required: function () {
        return this.discountType === "percent";
      },
    },
    maxUsage: {
      type: Number,
      min: 1,
      default: null,
    },
    usedCount: {
      type: Number,
      default: 0,
      min: 0,
    },
    appliesTo: {
      type: String,
      enum: ["all", "product", "type", "user"],
      default: "all",
    },
    targetIds: [String],
    startAt: {
      type: Date,
      default: Date.now,
    },
    expiredAt: {
      type: Date,
      required: true,
      validate: {
        validator: function (v) {
          return v > this.startAt;
        },
        message: "Ngày hết hạn phải sau ngày bắt đầu",
      },
    },
    isActive: {
      type: Boolean,
      default: true,
    },
    // Bổ sung các trường mới cho cơ chế tặng mã
    issuedFor: {
      type: String,
      enum: ["general", "welcome", "loyalty", "event", "referral", "birthday"],
      default: "general",
    },
    issuedTo: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    isAutoGenerated: {
      type: Boolean,
      default: false,
    },
    description: {
      type: String,
      default: "",
    },
    conditions: {
      minPurchaseCount: { type: Number, default: 0 },
      minTotalSpent: { type: Number, default: 0 },
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
  }
);

// Virtual kiểm tra mã còn hiệu lực
promotionCodeSchema.virtual("isValid").get(function () {
  const now = new Date();
  return (
    this.isActive &&
    now >= this.startAt &&
    now <= this.expiredAt &&
    (this.maxUsage === null || this.usedCount < this.maxUsage)
  );
});

// Virtual để lấy thông tin chi tiết
promotionCodeSchema.virtual("details").get(function () {
  return {
    code: this.code,
    discount:
      this.discountType === "percent"
        ? `${this.discountValue}%`
        : `${this.discountValue.toLocaleString()}₫`,
    minOrder:
      this.minOrderValue > 0
        ? `Đơn tối thiểu ${this.minOrderValue.toLocaleString()}₫`
        : "Không giới hạn đơn tối thiểu",
    expires: this.expiredAt.toLocaleDateString(),
    description: this.description || "Mã giảm giá",
  };
});

// Middleware tự động set ngày hết hạn nếu không có
promotionCodeSchema.pre("save", function (next) {
  if (!this.expiredAt) {
    this.expiredAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Mặc định 30 ngày
  }
  next();
});

// Phương thức tĩnh để tạo mã tự động
promotionCodeSchema.statics.generateCode = async function (options) {
  const { prefix = "VIP", length = 8 } = options;
  let code;
  let exists;

  do {
    code =
      prefix +
      Math.random()
        .toString(36)
        .slice(2, 2 + length)
        .toUpperCase();
    exists = await this.findOne({ code });
  } while (exists);

  return code;
};

// Index tối ưu hiệu suất
promotionCodeSchema.index({ code: 1, isActive: 1 });
promotionCodeSchema.index({ expiredAt: 1 });
promotionCodeSchema.index({ appliesTo: 1, targetIds: 1 });
promotionCodeSchema.index({ issuedTo: 1, isValid: 1 });
promotionCodeSchema.index({ issuedFor: 1, isActive: 1 });

module.exports = mongoose.model("PromotionCode", promotionCodeSchema);
