import axios from "axios";

// T·∫°o instance c·ªßa Axios
const axiosInstance = axios.create({
  baseURL: "http://localhost:3002/", // Thay URL backend c·ªßa b·∫°n
  headers: { "Content-Type": "application/json" },
});

// Th√™m interceptor ƒë·ªÉ x·ª≠ l√Ω token h·∫øt h·∫°n
axiosInstance.interceptors.response.use(
  (response) => response, // N·∫øu request th√†nh c√¥ng, tr·∫£ v·ªÅ b√¨nh th∆∞·ªùng
  async (error) => {
    const originalRequest = error.config;

    if (
      error.response &&
      error.response.status === 403 &&
      !originalRequest._retry
    ) {
      originalRequest._retry = true; // ƒê√°nh d·∫•u ƒë√£ th·ª≠ refresh

      try {
        // G·ª≠i request l√†m m·ªõi token
        const refreshToken = localStorage.getItem("refreshToken");
        const res = await axios.post("http://localhost:5000/api/auth/refresh", {
          refresh_token: refreshToken,
        });

        if (res.data.status === "OK") {
          const newAccessToken = res.data.access_token;
          localStorage.setItem("accessToken", newAccessToken);

          // C·∫≠p nh·∫≠t header Authorization cho request g·ªëc v√† g·ª≠i l·∫°i
          originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;
          return axiosInstance(originalRequest);
        }
      } catch (err) {
        console.log("üîπ Refresh token failed, logging out...");
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        window.location.href = "/login"; // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
      }
    }

    return Promise.reject(error); // N·∫øu kh√¥ng th·ªÉ refresh, tr·∫£ l·ªói v·ªÅ
  }
);

export default axiosInstance;
