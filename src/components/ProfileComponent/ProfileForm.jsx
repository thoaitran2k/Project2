import React, { useEffect, useState } from "react";
import styled from "styled-components";
import {
  Form,
  Input,
  Button,
  DatePicker,
  Select,
  message,
  Row,
  Col,
  Modal,
} from "antd";
import {
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  LockOutlined,
} from "@ant-design/icons";
import { useSelector, useDispatch } from "react-redux";
import dayjs from "dayjs";
import { changePasswordUser, updateUser } from "../../Services/UserService";
import { setLoading } from "../../redux/slices/loadingSlice";
import { setUser } from "../../redux/slices/userSlice";
import Loading from "../LoadingComponent/Loading";

const { Option } = Select;

const ProfileForm = () => {
  const [form] = Form.useForm();
  const [passwordForm] = Form.useForm();
  const dispatch = useDispatch();
  const [isPhoneModalVisible, setIsPhoneModalVisible] = useState(false);
  const [isPasswordModalVisible, setIsPasswordModalVisible] = useState(false);

  // L·∫•y d·ªØ li·ªáu t·ª´ Redux
  const user = useSelector((state) => state.user);
  const accessToken = useSelector((state) => state.user.accessToken);
  const [phone, setPhone] = useState(user.phone || "");

  //console.log("User t·ª´ Redux:", user);

  useEffect(() => {
    if (user) {
      form.setFieldsValue({
        username: user.username || "",
        nickname: user.nickname || "",
        phone: user.phone ? String(user.phone) : "",
        email: user.email || "",
        dob: user.dob && dayjs(user.dob).isValid() ? dayjs(user.dob) : null,
        gender: user.gender || null,
        nationality: user.nationality ?? undefined,
      });
    }
  }, [user, form]);

  //C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i
  const handlePhoneUpdate = async () => {
    if (!phone.trim()) {
      message.error("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá!");
      return;
    }
    if (!/^(0[3-9][0-9]{8}|84[3-9][0-9]{8})$/.test(phone)) {
      message.error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.");
      return;
    }

    try {
      dispatch(setLoading(true));
      const response = await updateUser(user._id, { phone }, accessToken);
      message.success(response.message || "C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng!");

      dispatch(setUser({ ...user, phone }));
      setIsPhoneModalVisible(false);
    } catch (error) {
      message.error(error.response?.data?.message || "C√≥ l·ªói x·∫£y ra!");
    } finally {
      dispatch(setLoading(false));
    }
  };

  //ƒê·ªïi m·∫≠t kh·∫©u
  const handleChangePassword = async (values) => {
    console.log("üì§ D·ªØ li·ªáu g·ª≠i ƒëi:", values);
    try {
      dispatch(setLoading(true));
      const { oldPassword, newPassword, confirmPassword } = values;

      if (newPassword !== confirmPassword) {
        message.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
        return;
      }

      try {
        const response = await changePasswordUser(
          oldPassword,
          newPassword,
          confirmPassword,
          accessToken
        );

        console.log("üì® Ph·∫£n h·ªìi t·ª´ API:", response);
        message.success(response.message || "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");

        setIsPasswordModalVisible(false);
        passwordForm.resetFields();
      } catch (error) {
        console.error("üî• L·ªói FE:", error);
        message.error(error); // In to√†n b·ªô l·ªói ƒë·ªÉ xem chi ti·∫øt
        const errorMessage =
          error.response?.data?.message || "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u!";
        message.error(errorMessage); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ backend
      }
    } finally {
      dispatch(setLoading(false));
    }
  };

  const handleUpdateUser = async (values) => {
    if (!user?._id) {
      message.error("L·ªói: Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng!");
      return;
    }

    try {
      dispatch(setLoading(true));

      // Ki·ªÉm tra gi√° tr·ªã date h·ª£p l·ªá
      const formattedDob =
        values.dob && dayjs(values.dob).isValid()
          ? dayjs(values.dob).format("YYYY-MM-DD")
          : null;

      const updatedData = {
        username: values.username,
        nickname: values.nickname,
        dob: formattedDob, // ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
        gender: values.gender,
      };

      const response = await updateUser(user._id, updatedData, accessToken);
      message.success(response.message || "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");

      dispatch(
        setUser({
          ...user, // Gi·ªØ nguy√™n c√°c tr∆∞·ªùng kh√°c
          ...updatedData,
          username: values.username, // C·∫≠p nh·∫≠t username m·ªõi
        })
      );

      setTimeout(() => {
        dispatch(setLoading(false)); // D·ª´ng loading tr∆∞·ªõc khi reload
        //window.location.reload();
      }, 1500); // Ch·ªù 1 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o

      // C·∫≠p nh·∫≠t l·∫°i form sau khi l∆∞u th√†nh c√¥ng
      form.setFieldsValue({
        ...values,
        dob: formattedDob ? dayjs(formattedDob) : null,
      });
    } catch (error) {
      message.error(error.response?.data?.message || "C√≥ l·ªói x·∫£y ra!");
    } finally {
      setTimeout(() => {
        dispatch(setLoading(false)); // D·ª´ng loading tr∆∞·ªõc khi reload
        //window.location.reload();
      }, 1000); // Ch·ªù 1 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
    }
  };

  return (
    <Loading>
      <Form
        form={form}
        onFinish={handleUpdateUser}
        layout="vertical"
        style={{ background: "white", padding: "15px", marginBottom: "30px" }}
      >
        <Row gutter={24}>
          <Col
            span={12}
            style={{
              borderRight: "1px solid #d9d9d9", // ƒê∆∞·ªùng g·∫°ch d·ªçc
              paddingRight: "18px", // T·∫°o kho·∫£ng c√°ch v·ªõi n·ªôi dung
            }}
          >
            <Form.Item
              name="username"
              label="H·ªç & T√™n"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!" }]}
            >
              <Input prefix={<UserOutlined />} placeholder="Nh·∫≠p h·ªç v√† t√™n" />
            </Form.Item>
            <Form.Item name="nickname" label="Nickname">
              <Input placeholder="Nh·∫≠p nickname" />
            </Form.Item>
            <Form.Item
              name="dob"
              label="Ng√†y sinh"
              rules={[
                { required: true, message: "Vui l√≤ng ch·ªçn ng√†y sinh!" },
                {
                  validator: (_, value) => {
                    if (value && !value.isValid()) {
                      return Promise.reject("Ng√†y sinh kh√¥ng h·ª£p l·ªá!");
                    }
                    return Promise.resolve();
                  },
                },
              ]}
            >
              <DatePicker style={{ width: "100%" }} format="DD/MM/YYYY" />
            </Form.Item>
            <Form.Item name="gender" label="Gi·ªõi t√≠nh">
              <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
                <Option value="Nam">Nam</Option>
                <Option value="N·ªØ">N·ªØ</Option>
                <Option value="other">Kh√°c</Option>
              </Select>
            </Form.Item>
            <Form.Item style={{ textAlign: "center", marginTop: 20 }}>
              <Button type="primary" htmlType="submit">
                L∆∞u thay ƒë·ªïi
              </Button>
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item name="email" label="ƒê·ªãa ch·ªâ email">
              <Input prefix={<MailOutlined />} disabled />
            </Form.Item>
            <Form.Item name="phone" label="S·ªë ƒëi·ªán tho·∫°i">
              <StyleInputUpdatePhone
                prefix={<PhoneOutlined />}
                readOnly
                className="readonly-input"
              />
            </Form.Item>
            <Button
              type="primary"
              style={{ marginTop: 5 }}
              onClick={() => setIsPhoneModalVisible(true)}
            >
              C·∫≠p nh·∫≠t
            </Button>
            <h3>B·∫£o m·∫≠t</h3>
            <Button
              type="primary"
              icon={<LockOutlined />}
              onClick={() => setIsPasswordModalVisible(true)}
            >
              ƒê·ªïi m·∫≠t kh·∫©u
            </Button>
            <h3>Y√™u c·∫ßu x√≥a t√†i kho·∫£n</h3>
            <Button type="primary" danger>
              Y√™u c·∫ßu
            </Button>
          </Col>
        </Row>
      </Form>

      {/* Modal c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i */}
      <Modal
        title="C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i"
        visible={isPhoneModalVisible}
        onCancel={() => {
          setIsPhoneModalVisible(false);
          setTimeout(() => setPhone(user.phone || ""), 0); // ƒê·∫∑t l·∫°i phone ngay sau khi ƒë√≥ng modal
        }}
        centered
        footer={[
          <Button
            key="cancel"
            onClick={() => {
              setIsPhoneModalVisible(false);
              setPhone(user.phone || "");
            }}
          >
            H·ªßy
          </Button>,
          <Button key="submit" type="primary" onClick={handlePhoneUpdate}>
            X√°c nh·∫≠n
          </Button>,
        ]}
      >
        <Input
          prefix={<PhoneOutlined />}
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i m·ªõi"
          value={phone}
          onChange={(e) => {
            const value = e.target.value;
            // Ch·ªâ cho ph√©p nh·∫≠p s·ªë
            if (/^\d*$/.test(value)) {
              setPhone(value);
            } else {
              message.warning("Ch·ªâ ƒë∆∞·ª£c nh·∫≠p s·ªë!");
            }
          }}
        />
      </Modal>
      {/* ƒê·ªïi m·∫≠t kh·∫©u */}
      <Modal
        title="ƒê·ªïi m·∫≠t kh·∫©u"
        visible={isPasswordModalVisible}
        onCancel={() => setIsPasswordModalVisible(false)}
        centered
        footer={null}
      >
        <Form
          form={passwordForm}
          onFinish={handleChangePassword}
          layout="vertical"
        >
          <Form.Item
            name="oldPassword"
            label="M·∫≠t kh·∫©u c≈©"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©!" }]}
          >
            <Input.Password />
          </Form.Item>
          <Form.Item
            name="newPassword"
            label="M·∫≠t kh·∫©u m·ªõi"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!" }]}
          >
            <Input.Password />
          </Form.Item>
          <Form.Item
            name="confirmPassword"
            label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
            rules={[{ required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!" }]}
          >
            <Input.Password />
          </Form.Item>
          <Button type="primary" htmlType="submit">
            X√°c nh·∫≠n
          </Button>
        </Form>
      </Modal>
    </Loading>
  );
};

export default ProfileForm;

//Styled Component
export const StyleInputUpdatePhone = styled(Input)`
  .readonly-input {
    background-color: red !important;
    color: black !important;
    cursor: not-allowed;
    border: 1px solid #d9d9d9;
  }
`;
